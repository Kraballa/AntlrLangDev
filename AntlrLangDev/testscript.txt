print("# TESTSCRIPT");

numAsserts = 0;
numFailures = 0;

function assert(_obj){
    numAsserts = numAsserts + 1;
    if(_obj){
        
    }
    else{
        numFailures = numFailures + 1;
    }
}

function finalizeAssert(){
    ratio = 100 - 100.0 * numFailures / numAsserts;
    str = "result: " + (numAsserts - numFailures) + " / " + numAsserts + " (" + ratio + "% correct)";
    print(str);

    numAsserts = 0;
    numFailures = 0;
}

print("## test boolean logic");
assert(true);
assert(!false);
assert(true | false);
assert(!(true & false));
assert(true | false & false); //fails if and/or precedence faulty

assert(1);
assert(-1+2);
assert(0.001);

a = 4.345;
assert(a - a < 0.001);
assert(a != 0);
assert(a > 0);
b = a < 0;
assert(!b);
assert(!(b));
assert(5 >= 5);
assert(5 <= 5);
assert(6 > 5);

finalizeAssert();

print("## test maths logic");
assert(1 + 1 * 2 == 3);
assert((1+1) * 2 == 4);
assert(6 % 4 == 2);
assert(6 / 4 == 1);

finalizeAssert();

print("## test control structure logic");
if(false){
    assert(false);
}
else{assert(true);}

if(!true){
    assert(false);
}
if(0){
    assert(false);
}
else if(false | true & false){
    assert(false);
}
else{
    assert(true);
}

finalizeAssert();

print("## test comments");
assert(true);
//assert(false);
i = 0; //assert(false);

finalizeAssert();

function testFunc(_test){
    print(_test);
}

testFunc("Hello, Functions!");

print((rand() * 10)|int);

print(10.4|int > 10);
print(10.9|int);

function test(_str){
    print(_str);

    function test2(_str2){
        print(_str2);
    }

    test2("test2 inside test 1");
}

test("test1");

function test2(_str){
    print(_str);
}

test2("2nd test2 definition but previous scope exited");