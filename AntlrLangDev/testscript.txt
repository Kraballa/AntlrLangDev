print("# TESTSCRIPT");

totalAsserts = 0;
totalFailures = 0;

numAsserts = 0;
numFailures = 0;

function assert(_obj){
    numAsserts = numAsserts + 1;
    totalAsserts = totalAsserts + 1;
    if(!_obj|bool){
        print("assertion failed");
        numFailures = numFailures + 1;
        totalFailures = totalFailures + 1;
    }
}

function finalizeAssert(){
    ratio = 100 - 100.0 * numFailures / numAsserts;
    str = "result: " + (numAsserts - numFailures) + " / " + numAsserts + " (" + ratio + "% correct)";
    print(str);

    numAsserts = 0;
    numFailures = 0;
}

function concludeTests(){
    print("-----------------------------------
combined test results:");
    ratio = 100 - 100.0 * totalFailures / totalAsserts;
    str = "result: " + (totalAsserts - totalFailures) + " / " + totalAsserts + " (" + ratio + "% correct)";
    print(str);
}

print("## test boolean logic");
assert(true);
assert(!false);
assert(true | false);
assert(!(true & false));
assert(true | false & false); //fails if and/or precedence faulty

assert(1);
assert(-1+2);
assert(0.001);

a = 4.345;
assert(a - a < 0.001);
assert(a != 0);
assert(a > 0);
b = a < 0;
assert(!b);
assert(!(b));
assert(5 >= 5);
assert(5 <= 5);
assert(6 > 5);

finalizeAssert();

print("## test maths logic");
assert(1 + 1 * 2 == 3);
assert((1+1) * 2 == 4);
assert(6 % 4 == 2);
assert(6 / 4 == 1);

finalizeAssert();

print("## test control structure logic");
if(false){
    assert(false);
}
else{assert(true);}

if(!true){
    assert(false);
}
if(0){
    assert(false);
}
else if(false | true & false){
    assert(false);
}
else{
    assert(true);
}

finalizeAssert();

print("## test comments");
assert(true);
//assert(false);
i = 0; //assert(false);

finalizeAssert();

print("## test functions");

assert(10.4|int == 10);
assert(10.9|int == 10); 

function test(_str){
    i = 10

    function test2(_str2){
        i = i * 2;
    }
    test2("test");
    assert(i == 20);

    function test3(){
        assert(false);
    }
}

test("test1");

function test3(){
    assert(true);
}
test3();

//test parameter scoping
val = 10;
toAdd = 5;
function add(val){
    assert(val == 5);
    assert(local.val == 10);
    local.val = local.val + val;
    assert(local.val == 15);
}
add(toAdd);
assert(val == 15);

test = 0;
test2 = 1;
function testA(test){
    assert(test == test2);
    assert(local.test == 0);

    //like in c# this function definition is legal and the outer 'test' is not accessible inside 'testB'. the outmost 'test' can be accessed through 'local.test' 
    function testB(test){
        assert(test == 2);
        assert(local.test == 0);
    }
    testB(2);
}
testA(test2);

finalizeAssert();

print("## hardcore function overwriting, parameter nesting stress test");
num = 5;
function test(num){
    assert(num == 1);
    function test2(num){
        assert(num == 2);
    }
    test2(2);

    function test(num){
        assert(num == 3);
    }

    test(3);

    function test(num){
        assert(num == 4);
        assert(local.num == 5);
    }
    test(4);
}
test(1);

finalizeAssert();

concludeTests();