print("# TESTSCRIPT");

int totalAsserts = 0;
int totalFailures = 0;

int numAsserts = 0;
int numFailures = 0;

function assert(bool _obj){
    numAsserts = numAsserts + 1;
    totalAsserts = totalAsserts + 1;
    if(!_obj){
        print("assertion failed");
        numFailures = numFailures + 1;
        totalFailures = totalFailures + 1;
    }
}

function finalizeAssert(){
    float ratio = 100 - 100.0 * numFailures / numAsserts;
    string str = "result: " + (numAsserts - numFailures) + " / " + numAsserts + " (" + ratio + "% correct)";
    print(str);

    numAsserts = 0;
    numFailures = 0;
}

function concludeTests(){
    print("-----------------------------------
combined test results:");
    float ratio = 100 - 100.0 * totalFailures / totalAsserts;
    string str = "result: " + (totalAsserts - totalFailures) + " / " + totalAsserts + " (" + ratio + "% correct)";
    print(str);
}

int test = 0;
function a(int test){
    test = 10;
}
assert(test == 0);


print("## test boolean logic");
assert(true);
assert(!false);
assert(true | false);
assert(!(true & false));
assert(true | false & false); //fails if and/or precedence faulty

assert(1);
assert(-1+2);
assert(0.001);

assert(-5 < 0);

float a = 4.345;
assert(a - a < 0.001);
assert(a != 0);
assert(a > 0);
bool b = a < 0;
assert(!b);
assert(!(b));
assert(5 >= 5);
assert(5 <= 5);
assert(6 > 5);

int t = 5;
assert(!t == false);
assert(!!t == true);

finalizeAssert();

print("## test maths logic");
assert(1 + 1 * 2 == 3);
assert((1+1) * 2 == 4);
assert(6 % 4 == 2);
assert(6 / 4 == 1);

a = 1;
a += 5;
assert(a == 6);
a -= 1;
assert(a == 5);

finalizeAssert();

print("## test control structure logic");
if(false){
    assert(false);
}
else{assert(true);}

if(!true){
    assert(false);
}
if(0){
    assert(false);
}
else if(false | true & false){
    assert(false);
}
else{
    assert(true);
}

finalizeAssert();

print("## test comments");
assert(true);
//assert(false);
int i = 0; //assert(false);

finalizeAssert();

print("## test functions");

assert(10.4|int == 10);
assert(10.9|int == 10); 

function test(string _str){
    i = 10;

    function test2(string _str2){
        i = i * 2;
    }
    test2("test");
    assert(i == 20);

    function test3(){
        assert(false);
    }
}

test("test1");

function test3(){
    assert(true);
}
test3();

function pow(float val, int power){
    float ret = 1;
    i = 0;
    while(i < power){
        ret = ret * val;
        i += 1;
    }
    return ret;
    assert(false);
}

assert(pow(4,0) == 1);
assert(pow(4,1) == 4);
assert(pow(4,2) == 16);
assert(pow(4,3) == 64);

//test parameter scoping
int val = 10;
int toAdd = 5;
function add(int val){
    assert(val == 5);
    assert(global.val == 10);
    global.val += val;
    assert(global.val == 15);
}
add(toAdd);
assert(val == 15);

test = 0;
function testA(int test){
    assert(test == 1);
    assert(global.test == 0);

    function testB(int test){
        assert(test == 2);
        assert(global.test == 0);
    }
    testB(2);
}
testA(1);

test = 0;
function overwriteParamValue(int test){
    test = 2;
    assert(global.test == 0);
    assert(test == 2);
}
overwriteParamValue(1);
assert(test == 0);
finalizeAssert();

print("## hardcore function overwriting, parameter nesting stress test");

int xyz = 0;

function aTest(){
    assert(false);
    xyz = 1;
}

function bTest(){
    function aTest(){
        assert(true);
        xyz = 2;

        function aTest(){
            xyz = 3;
        }
        aTest();
    }
    aTest();
}   

bTest();
assert(xyz == 3);

function recurse(int i){
    if(i <= 0){
        return;
    }
    recurse(i-1);
}
recurse(10);

function factorial(int i){
    if(i <= 1){
        return 1;
    }
    return i * factorial(i-1);
}
assert(factorial(6) == 720);
assert(factorial(9) == 362880);

finalizeAssert();

print("## test null coalescing");

assert(null ?? true);

function nullFunc(){
    //return nothing
}
assert(nullFunc() ?? true);

function nullFunc2(){
    return true;
}

assert(nullFunc2() ?? false);

function nullFunc3(){
    return null;
}
nullFunc();

int memVal = 0;

finalizeAssert();

concludeTests();